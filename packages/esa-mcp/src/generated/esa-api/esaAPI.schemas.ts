/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * esa API
 * API for esa.io - A documentation sharing service
 * OpenAPI spec version: 1.0.0
 */
export type GetV1User200 = {
  created_at?: string;
  email?: string;
  icon?: string;
  id?: number;
  name?: string;
  screen_name?: string;
  updated_at?: string;
};

export type GetV1UserInclude = typeof GetV1UserInclude[keyof typeof GetV1UserInclude];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1UserInclude = {
  teams: 'teams',
} as const;

export type GetV1UserParams = {
include?: GetV1UserInclude;
};

export type PostV1TeamsTeamNameEmojis201 = {
  code?: string;
};

export type PostV1TeamsTeamNameEmojisBodyTwo = {
  'emoji[code]'?: string;
  'emoji[image]'?: Blob;
};

export type PostV1TeamsTeamNameEmojisBodyOneEmoji = {
  code: string;
  image?: string;
  origin_code?: string;
};

export type PostV1TeamsTeamNameEmojisBodyOne = {
  emoji: PostV1TeamsTeamNameEmojisBodyOneEmoji;
};

export type GetV1TeamsTeamNameEmojis200EmojisItemRaw = string | null;

export type GetV1TeamsTeamNameEmojis200EmojisItem = {
  aliases?: string[];
  category?: string;
  code?: string;
  raw?: GetV1TeamsTeamNameEmojis200EmojisItemRaw;
  url?: string;
};

export type GetV1TeamsTeamNameEmojis200 = {
  emojis?: GetV1TeamsTeamNameEmojis200EmojisItem[];
};

export type GetV1TeamsTeamNameEmojisInclude = typeof GetV1TeamsTeamNameEmojisInclude[keyof typeof GetV1TeamsTeamNameEmojisInclude];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsTeamNameEmojisInclude = {
  all: 'all',
} as const;

export type GetV1TeamsTeamNameEmojisParams = {
include?: GetV1TeamsTeamNameEmojisInclude;
};

export type PostV1TeamsTeamNameInvitations201InvitationsItem = {
  code?: string;
  email?: string;
  expires_at?: string;
  url?: string;
};

export type PostV1TeamsTeamNameInvitations201 = {
  invitations?: PostV1TeamsTeamNameInvitations201InvitationsItem[];
};

export type PostV1TeamsTeamNameInvitationsBodyMember = {
  /** @maxItems 100 */
  emails: string[];
};

export type PostV1TeamsTeamNameInvitationsBody = {
  member: PostV1TeamsTeamNameInvitationsBodyMember;
};

export type GetV1TeamsTeamNameInvitations200InvitationsItem = {
  code?: string;
  email?: string;
  expires_at?: string;
  url?: string;
};

export type GetV1TeamsTeamNameInvitations200 = Pagination & {
  invitations?: GetV1TeamsTeamNameInvitations200InvitationsItem[];
};

export type PostV1TeamsTeamNameInvitationRegenerator200 = {
  url?: string;
};

export type GetV1TeamsTeamNameInvitation200 = {
  url?: string;
};

export type GetV1TeamsTeamNameTags200TagsItem = {
  name?: string;
  posts_count?: number;
};

export type GetV1TeamsTeamNameTags200 = Pagination & {
  tags?: GetV1TeamsTeamNameTags200TagsItem[];
};

export type PostV1TeamsTeamNameCategoriesBatchMove200 = {
  /** Number of moved categories including subcategories */
  count?: number;
  from?: string;
  to?: string;
};

export type PostV1TeamsTeamNameCategoriesBatchMoveBody = {
  /** Source category path */
  from: string;
  /** Destination category path */
  to: string;
};

export type GetV1TeamsTeamNamePostsPostNumberWatchers200WatchersItem = {
  created_at?: string;
  user?: User;
};

export type GetV1TeamsTeamNamePostsPostNumberWatchers200 = Pagination & {
  watchers?: GetV1TeamsTeamNamePostsPostNumberWatchers200WatchersItem[];
};

export type PostV1TeamsTeamNameCommentsCommentIdStarBody = {
  body?: string;
};

export type GetV1TeamsTeamNameCommentsCommentIdStargazers200StargazersItemBody = string | null;

export type GetV1TeamsTeamNameCommentsCommentIdStargazers200StargazersItem = {
  body?: GetV1TeamsTeamNameCommentsCommentIdStargazers200StargazersItemBody;
  created_at?: string;
  user?: User;
};

export type GetV1TeamsTeamNameCommentsCommentIdStargazers200 = Pagination & {
  stargazers?: GetV1TeamsTeamNameCommentsCommentIdStargazers200StargazersItem[];
};

export type PostV1TeamsTeamNamePostsPostNumberStarBody = {
  body?: string;
};

export type GetV1TeamsTeamNamePostsPostNumberStargazers200StargazersItemBody = string | null;

export type GetV1TeamsTeamNamePostsPostNumberStargazers200StargazersItem = {
  body?: GetV1TeamsTeamNamePostsPostNumberStargazers200StargazersItemBody;
  created_at?: string;
  user?: User;
};

export type GetV1TeamsTeamNamePostsPostNumberStargazers200 = Pagination & {
  stargazers?: GetV1TeamsTeamNamePostsPostNumberStargazers200StargazersItem[];
};

export type GetV1TeamsTeamNameComments200 = Pagination & {
  comments?: Comment[];
};

export type PatchV1TeamsTeamNameCommentsCommentIdBodyComment = {
  body_md?: string;
  user?: string;
};

export type PatchV1TeamsTeamNameCommentsCommentIdBody = {
  comment?: PatchV1TeamsTeamNameCommentsCommentIdBodyComment;
};

export type GetV1TeamsTeamNameCommentsCommentIdInclude = typeof GetV1TeamsTeamNameCommentsCommentIdInclude[keyof typeof GetV1TeamsTeamNameCommentsCommentIdInclude];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsTeamNameCommentsCommentIdInclude = {
  stargazers: 'stargazers',
} as const;

export type GetV1TeamsTeamNameCommentsCommentIdParams = {
include?: GetV1TeamsTeamNameCommentsCommentIdInclude;
};

export type PostV1TeamsTeamNamePostsPostNumberCommentsBodyComment = {
  body_md: string;
  user?: string;
};

export type PostV1TeamsTeamNamePostsPostNumberCommentsBody = {
  comment?: PostV1TeamsTeamNamePostsPostNumberCommentsBodyComment;
};

export type GetV1TeamsTeamNamePostsPostNumberComments200 = Pagination & {
  comments?: Comment[];
};

export type PatchV1TeamsTeamNamePostsPostNumber200AllOf = {
  overlapped?: boolean;
};

export type PatchV1TeamsTeamNamePostsPostNumber200 = Post & PatchV1TeamsTeamNamePostsPostNumber200AllOf;

export type PatchV1TeamsTeamNamePostsPostNumberBodyPostOriginalRevision = {
  body_md?: string;
  number?: number;
  user?: string;
};

export type PatchV1TeamsTeamNamePostsPostNumberBodyPost = {
  body_md?: string;
  category?: string;
  created_by?: string;
  message?: string;
  name?: string;
  original_revision?: PatchV1TeamsTeamNamePostsPostNumberBodyPostOriginalRevision;
  tags?: string[];
  updated_by?: string;
  wip?: boolean;
};

export type PatchV1TeamsTeamNamePostsPostNumberBody = {
  post?: PatchV1TeamsTeamNamePostsPostNumberBodyPost;
};

export type GetV1TeamsTeamNamePostsPostNumberInclude = typeof GetV1TeamsTeamNamePostsPostNumberInclude[keyof typeof GetV1TeamsTeamNamePostsPostNumberInclude];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsTeamNamePostsPostNumberInclude = {
  comments: 'comments',
  'comments,commentsstargazers': 'comments,comments.stargazers',
  stargazers: 'stargazers',
} as const;

export type GetV1TeamsTeamNamePostsPostNumberParams = {
include?: GetV1TeamsTeamNamePostsPostNumberInclude;
};

export type PostV1TeamsTeamNamePostsBodyPost = {
  body_md?: string;
  category?: string;
  message?: string;
  name: string;
  tags?: string[];
  template_post_id?: number;
  user?: string;
  wip?: boolean;
};

export type PostV1TeamsTeamNamePostsBody = {
  post?: PostV1TeamsTeamNamePostsBodyPost;
};

export type GetV1TeamsTeamNamePosts200 = Pagination & {
  posts?: Post[];
};

export type GetV1TeamsTeamNamePostsOrder = typeof GetV1TeamsTeamNamePostsOrder[keyof typeof GetV1TeamsTeamNamePostsOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsTeamNamePostsOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type GetV1TeamsTeamNamePostsSort = typeof GetV1TeamsTeamNamePostsSort[keyof typeof GetV1TeamsTeamNamePostsSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsTeamNamePostsSort = {
  updated: 'updated',
  created: 'created',
  number: 'number',
  stars: 'stars',
  watches: 'watches',
  comments: 'comments',
  best_match: 'best_match',
} as const;

export type GetV1TeamsTeamNamePostsInclude = typeof GetV1TeamsTeamNamePostsInclude[keyof typeof GetV1TeamsTeamNamePostsInclude];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsTeamNamePostsInclude = {
  comments: 'comments',
  stargazers: 'stargazers',
  'comments,stargazers': 'comments,stargazers',
  'comments,commentsstargazers': 'comments,comments.stargazers',
} as const;

export type GetV1TeamsTeamNamePostsParams = {
/**
 * Search query
 */
q?: string;
include?: GetV1TeamsTeamNamePostsInclude;
sort?: GetV1TeamsTeamNamePostsSort;
order?: GetV1TeamsTeamNamePostsOrder;
/**
 * page number
 */
page?: PageParameter;
/**
 * number of items per page
 */
per_page?: PerPageParameter;
};

export type GetV1TeamsTeamNameStats200 = {
  comments?: number;
  daily_active_users?: number;
  members?: number;
  monthly_active_users?: number;
  posts?: number;
  posts_shipped?: number;
  posts_wip?: number;
  stars?: number;
  weekly_active_users?: number;
};

export type GetV1Teams200 = Pagination & {
  teams?: Team[];
};

export type GetV1TeamsRole = typeof GetV1TeamsRole[keyof typeof GetV1TeamsRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsRole = {
  member: 'member',
  owner: 'owner',
} as const;

export type GetV1TeamsParams = {
role?: GetV1TeamsRole;
};

export type PostOauthRevoke200 = { [key: string]: unknown };

export type PostOauthRevokeBody = {
  client_id: string;
  client_secret: string;
  token: string;
};

export type GetOauthTokenInfo200User = {
  id?: number;
};

export type GetOauthTokenInfo200ExpiresIn = number | null;

export type GetOauthTokenInfo200Application = {
  uid?: string;
};

export type GetOauthTokenInfo200 = {
  application?: GetOauthTokenInfo200Application;
  created_at?: number;
  expires_in?: GetOauthTokenInfo200ExpiresIn;
  resource_owner_id?: number;
  scope?: string[];
  user?: GetOauthTokenInfo200User;
};

export type PostOauthToken200 = {
  access_token?: string;
  created_at?: number;
  scope?: string;
  token_type?: string;
};

export type PostOauthTokenBodyGrantType = typeof PostOauthTokenBodyGrantType[keyof typeof PostOauthTokenBodyGrantType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostOauthTokenBodyGrantType = {
  authorization_code: 'authorization_code',
} as const;

export type PostOauthTokenBody = {
  client_id: string;
  client_secret: string;
  code: string;
  grant_type: PostOauthTokenBodyGrantType;
  redirect_uri: string;
};

/**
 * number of items per page
 */
export type PerPageParameter = number;

/**
 * page number
 */
export type PageParameter = number;

export interface ErrorResponseBody {
  error: string;
  message: string;
}

export interface User {
  icon?: string;
  myself?: boolean;
  name?: string;
  screen_name?: string;
}

export interface Comment {
  body_html?: string;
  body_md?: string;
  created_at?: string;
  created_by?: User;
  id?: number;
  star?: boolean;
  stargazers_count?: number;
  updated_at?: string;
  url?: string;
}

export type PostKind = typeof PostKind[keyof typeof PostKind];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostKind = {
  stock: 'stock',
  flow: 'flow',
} as const;

export interface Post {
  body_html?: string;
  body_md?: string;
  /** @nullable */
  category?: string | null;
  comments_count?: number;
  created_at?: string;
  created_by?: User;
  done_tasks_count?: number;
  full_name?: string;
  kind?: PostKind;
  message?: string;
  name?: string;
  number?: number;
  revision_number?: number;
  star?: boolean;
  stargazers_count?: number;
  tags?: string[];
  tasks_count?: number;
  updated_at?: string;
  updated_by?: User;
  url?: string;
  watch?: boolean;
  watchers_count?: number;
  wip?: boolean;
}

export type MemberRole = typeof MemberRole[keyof typeof MemberRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MemberRole = {
  owner: 'owner',
  member: 'member',
} as const;

export interface Member {
  email?: string;
  icon?: string;
  joined_at?: string;
  last_accessed_at?: string;
  myself?: boolean;
  name?: string;
  posts_count?: number;
  role?: MemberRole;
  screen_name?: string;
}

export type TeamPrivacy = typeof TeamPrivacy[keyof typeof TeamPrivacy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TeamPrivacy = {
  closed: 'closed',
  open: 'open',
} as const;

export interface Team {
  description?: string;
  icon?: string;
  name?: string;
  privacy?: TeamPrivacy;
  url?: string;
}

export interface Pagination {
  max_per_page?: number;
  /** @nullable */
  next_page?: number | null;
  page?: number;
  per_page?: number;
  /** @nullable */
  prev_page?: number | null;
  total_count?: number;
}

